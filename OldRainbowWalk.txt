void updatePatternRainbow() {
  byte maxVal = COLORTABLEMAX;
  byte l = 9 + (6 * currentValueRight[1]);
  byte f = frameNumber % (3 * l);
  byte r = 0;
  byte g = 0;
  byte b = 0;
  byte fal = 0.0;
  byte rise = 0.0;
  if (f % l) {

    float tem = f % l;
    tem /= l;
    float temr = (tem * (currentValueLeft[1] - currentValueLeft[0])) + currentValueLeft[0];
    float temg = (tem * (currentValueLeft[3] - currentValueLeft[2])) + currentValueLeft[2];
    float temb = (tem * (currentValueLeft[5] - currentValueLeft[4])) + currentValueLeft[4];
    if (f < l) { // sector 1 - green rising red falling
      byte flg = floor(temg);
      byte clg = ceil(temg);
      if (clg == flg) {
        g = getLeftVal(clg);
      } else {
        byte ming = getLeftVal(flg);
        byte maxg = getLeftVal(clg);
        maxg -= ming;
        float temg2 = temg - flg;
        g = ming + (maxg * temg2)+0.5;
        
      }
      
      temr=maxVal-temr;
      byte flr = floor(temr);
      byte clr = ceil(temr);
      if (clr == flr) {
        r = getLeftVal(clr);
      } else {
        byte minr = getLeftVal(flr);
        byte maxr = getLeftVal(clr);
        maxr -= minr;
        temr = temr - flr;
        r = minr + (maxr * temr)+0.5;
      }
      b=getLeftVal(currentValueLeft[4]);
    } else if (f < 2*l) { // sector 2 - blue rising green falling
      byte flb = floor(temb);
      byte clb = ceil(temb);
      if (clb == flb) {
        b = getLeftVal(clb);
      } else {
        byte minb = getLeftVal(flb);
        byte maxb = getLeftVal(clb);
        maxb -= minb;
        temb = temb - flb;
        b = minb + (maxb * temb)+0.5;
      }
      temg=maxVal-temg;
      byte flg = floor(temg);
      byte clg = ceil(temg);
      if (clg == flg) {
        g = getLeftVal(clg);
      } else {
        byte ming = getLeftVal(flg);
        byte maxg = getLeftVal(clg);
        maxg -= ming;
        temg = temg - flg;
        g = ming + (maxg * temg)+0.5;
      }
      r=getLeftVal(currentValueLeft[0]);
    } else { // sector 3 - red rising blue falling
      byte flr = floor(temr);
      byte clr = ceil(temr);
      if (clr == flr) {
        r = getLeftVal(clr);
      } else {
        byte minr = getLeftVal(flr);
        byte maxr = getLeftVal(clr);
        maxr -= minr;
        temr = temr - flr;
        r = minr + (maxr * temr)+0.5;
      }
      temb=maxVal-temb;
      byte flb = floor(temb);
      byte clb = ceil(temb);
      if (clb == flb) {
        b = getLeftVal(clb);
      } else {
        byte minb = getLeftVal(flb);
        byte maxb = getLeftVal(clb);
        maxb -= minb;
        temb = temb - flb;
        b = minb + (maxb * temb)+0.5;
      }
      g=getLeftVal(currentValueLeft[2]);
    }
  } else {
    if (f == 0) {
      r = getLeftVal(currentValueLeft[1]);
      g = getLeftVal(currentValueLeft[2]);
      b = getLeftVal(currentValueLeft[4]);
    } else if (f == l) {
      r = getLeftVal(currentValueLeft[0]);
      g = getLeftVal(currentValueLeft[3]);
      b = getLeftVal(currentValueLeft[4]);
    } else {
      r = getLeftVal(currentValueLeft[0]);
      g = getLeftVal(currentValueLeft[2]);
      b = getLeftVal(currentValueLeft[5]);
    }
  }

  for (unsigned int i = (LENGTH - 1) * 3; i > 2; i--) {
    pixels [i] = pixels[i - 3];
  }

  pixels[0] = r;
  pixels[1] = g;
  pixels[2] = b;
}
